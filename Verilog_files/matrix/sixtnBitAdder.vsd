$date
	Sat Apr 14 16:49:25 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testEightBitAdder $end
$scope module dut $end
$var wire 15 ! C [14:0] $end
$var wire 1 " C15 $end
$var wire 1 # Cin0 $end
$var wire 1 $ Cin0_new $end
$var wire 16 % a [15:0] $end
$var wire 16 & b [15:0] $end
$var wire 16 ' b_new [15:0] $end
$var wire 1 ( subtract $end
$var wire 16 ) sum [15:0] $end
$scope module adder0 $end
$var wire 1 * a $end
$var wire 1 + b $end
$var wire 1 $ carryin $end
$var wire 1 , carryout $end
$var wire 1 - sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 . a $end
$var wire 1 / b $end
$var wire 1 0 carryin $end
$var wire 1 1 carryout $end
$var wire 1 2 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 5 carryin $end
$var wire 1 6 carryout $end
$var wire 1 7 sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : carryin $end
$var wire 1 ; carryout $end
$var wire 1 < sum $end
$upscope $end
$scope module adder4 $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ? carryin $end
$var wire 1 @ carryout $end
$var wire 1 A sum $end
$upscope $end
$scope module adder5 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D carryin $end
$var wire 1 E carryout $end
$var wire 1 F sum $end
$upscope $end
$scope module adder6 $end
$var wire 1 G a $end
$var wire 1 H b $end
$var wire 1 I carryin $end
$var wire 1 J carryout $end
$var wire 1 K sum $end
$upscope $end
$scope module adder7 $end
$var wire 1 L a $end
$var wire 1 M b $end
$var wire 1 N carryin $end
$var wire 1 O carryout $end
$var wire 1 P sum $end
$upscope $end
$scope module adder8 $end
$var wire 1 Q a $end
$var wire 1 R b $end
$var wire 1 S carryin $end
$var wire 1 T carryout $end
$var wire 1 U sum $end
$upscope $end
$scope module adder9 $end
$var wire 1 V a $end
$var wire 1 W b $end
$var wire 1 X carryin $end
$var wire 1 Y carryout $end
$var wire 1 Z sum $end
$upscope $end
$scope module adder10 $end
$var wire 1 [ a $end
$var wire 1 \ b $end
$var wire 1 ] carryin $end
$var wire 1 ^ carryout $end
$var wire 1 _ sum $end
$upscope $end
$scope module adder11 $end
$var wire 1 ` a $end
$var wire 1 a b $end
$var wire 1 b carryin $end
$var wire 1 c carryout $end
$var wire 1 d sum $end
$upscope $end
$scope module adder12 $end
$var wire 1 e a $end
$var wire 1 f b $end
$var wire 1 g carryin $end
$var wire 1 h carryout $end
$var wire 1 i sum $end
$upscope $end
$scope module adder13 $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 l carryin $end
$var wire 1 m carryout $end
$var wire 1 n sum $end
$upscope $end
$scope module adder14 $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q carryin $end
$var wire 1 r carryout $end
$var wire 1 s sum $end
$upscope $end
$scope module adder15 $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 v carryin $end
$var wire 1 " carryout $end
$var wire 1 w sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0w
1v
0u
1t
0s
1r
1q
0p
1o
0n
1m
1l
0k
1j
0i
1h
1g
0f
1e
0d
1c
1b
0a
1`
0_
1^
1]
0\
1[
0Z
1Y
1X
0W
1V
0U
1T
1S
0R
1Q
0P
1O
1N
0M
1L
0K
1J
1I
0H
1G
0F
1E
1D
0C
1B
0A
1@
1?
0>
1=
0<
1;
1:
09
18
07
16
15
04
13
02
11
10
0/
1.
0-
1,
1+
1*
b0 )
0(
b1 '
b1 &
b1111111111111111 %
0$
0#
1"
b111111111111111 !
$end
#100000
