$date
	Tue Apr  3 00:53:22 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testEightBitAdder $end
$scope module dut $end
$var wire 1 ! C0 $end
$var wire 1 " C1 $end
$var wire 1 # C2 $end
$var wire 1 $ C3 $end
$var wire 1 % C4 $end
$var wire 1 & C5 $end
$var wire 1 ' C6 $end
$var wire 1 ( C7 $end
$var wire 1 ) Cin0 $end
$var wire 1 * Cin0_new $end
$var wire 8 + a [7:0] $end
$var wire 8 , b [7:0] $end
$var wire 1 - b_new_0 $end
$var wire 1 . b_new_1 $end
$var wire 1 / b_new_2 $end
$var wire 1 0 b_new_3 $end
$var wire 1 1 b_new_4 $end
$var wire 1 2 b_new_5 $end
$var wire 1 3 b_new_6 $end
$var wire 1 4 b_new_7 $end
$var wire 1 5 subtract $end
$var wire 1 6 sum0 $end
$var wire 1 7 sum1 $end
$var wire 1 8 sum2 $end
$var wire 1 9 sum3 $end
$var wire 1 : sum4 $end
$var wire 1 ; sum5 $end
$var wire 1 < sum6 $end
$var wire 1 = sum7 $end
$scope module adder0 $end
$var wire 1 > a $end
$var wire 1 - b $end
$var wire 1 * carryin $end
$var wire 1 ! carryout $end
$var wire 1 6 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 ? a $end
$var wire 1 . b $end
$var wire 1 ! carryin $end
$var wire 1 " carryout $end
$var wire 1 7 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 @ a $end
$var wire 1 / b $end
$var wire 1 " carryin $end
$var wire 1 # carryout $end
$var wire 1 8 sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 A a $end
$var wire 1 0 b $end
$var wire 1 # carryin $end
$var wire 1 $ carryout $end
$var wire 1 9 sum $end
$upscope $end
$scope module adder4 $end
$var wire 1 B a $end
$var wire 1 1 b $end
$var wire 1 $ carryin $end
$var wire 1 % carryout $end
$var wire 1 : sum $end
$upscope $end
$scope module adder5 $end
$var wire 1 C a $end
$var wire 1 2 b $end
$var wire 1 % carryin $end
$var wire 1 & carryout $end
$var wire 1 ; sum $end
$upscope $end
$scope module adder6 $end
$var wire 1 D a $end
$var wire 1 3 b $end
$var wire 1 & carryin $end
$var wire 1 ' carryout $end
$var wire 1 < sum $end
$upscope $end
$scope module adder7 $end
$var wire 1 E a $end
$var wire 1 4 b $end
$var wire 1 ' carryin $end
$var wire 1 ( carryout $end
$var wire 1 = sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1E
0D
1C
0B
1A
0@
1?
0>
1=
1<
1;
1:
19
18
17
16
05
04
13
02
11
00
1/
0.
1-
b1010101 ,
b10101010 +
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
$end
#100000
