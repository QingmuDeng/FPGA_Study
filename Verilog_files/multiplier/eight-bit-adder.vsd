$date
	Tue Apr 10 12:06:32 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testEightBitAdder $end
$scope module dut $end
$var wire 3 ! C [2:0] $end
$var wire 1 " Cin0 $end
$var wire 1 # Cin0_new $end
$var wire 1 $ Cout $end
$var wire 4 % a [3:0] $end
$var wire 4 & b [3:0] $end
$var wire 4 ' b_new [3:0] $end
$var wire 1 ( subtract $end
$var wire 4 ) sum [3:0] $end
$var integer 32 * i [31:0] $end
$scope module adder0 $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 # carryin $end
$var wire 1 - carryout $end
$var wire 1 . sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 / a $end
$var wire 1 0 b $end
$var wire 1 1 carryin $end
$var wire 1 2 carryout $end
$var wire 1 3 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 4 a $end
$var wire 1 5 b $end
$var wire 1 6 carryin $end
$var wire 1 7 carryout $end
$var wire 1 8 sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 9 a $end
$var wire 1 : b $end
$var wire 1 ; carryin $end
$var wire 1 $ carryout $end
$var wire 1 < sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0<
0;
0:
09
18
07
06
05
14
13
02
01
10
0/
1.
0-
1,
0+
b0 *
b111 )
0(
b11 '
b11 &
b100 %
0$
0#
0"
b0 !
$end
#100000
