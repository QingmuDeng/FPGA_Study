$date
	Tue Apr 10 20:26:36 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testEightBitAdder $end
$scope module dut $end
$var wire 4 ! A [3:0] $end
$var wire 4 " B [3:0] $end
$var wire 3 # Cout [2:0] $end
$var wire 8 $ P [7:0] $end
$var wire 4 % out_B0A [3:0] $end
$var wire 4 & out_B1A [3:0] $end
$var wire 4 ' out_B2A [3:0] $end
$var wire 4 ( out_B3A [3:0] $end
$var wire 4 ) sum0 [3:0] $end
$var wire 4 * sum1 [3:0] $end
$var wire 4 + sum2 [3:0] $end
$scope module adder0 $end
$var wire 3 , C [2:0] $end
$var wire 1 - Cin0 $end
$var wire 1 . Cin0_new $end
$var wire 1 / Cout $end
$var wire 4 0 a [3:0] $end
$var wire 4 1 b [3:0] $end
$var wire 4 2 b_new [3:0] $end
$var wire 1 3 subtract $end
$var wire 4 4 sum [3:0] $end
$var integer 32 5 i [31:0] $end
$scope module adder0 $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 . carryin $end
$var wire 1 8 carryout $end
$var wire 1 9 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 : a $end
$var wire 1 ; b $end
$var wire 1 < carryin $end
$var wire 1 = carryout $end
$var wire 1 > sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 ? a $end
$var wire 1 @ b $end
$var wire 1 A carryin $end
$var wire 1 B carryout $end
$var wire 1 C sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 D a $end
$var wire 1 E b $end
$var wire 1 F carryin $end
$var wire 1 / carryout $end
$var wire 1 G sum $end
$upscope $end
$upscope $end
$scope module adder1 $end
$var wire 3 H C [2:0] $end
$var wire 1 I Cin0 $end
$var wire 1 J Cin0_new $end
$var wire 1 K Cout $end
$var wire 4 L a [3:0] $end
$var wire 4 M b [3:0] $end
$var wire 4 N b_new [3:0] $end
$var wire 1 O subtract $end
$var wire 4 P sum [3:0] $end
$var integer 32 Q i [31:0] $end
$scope module adder0 $end
$var wire 1 R a $end
$var wire 1 S b $end
$var wire 1 J carryin $end
$var wire 1 T carryout $end
$var wire 1 U sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 V a $end
$var wire 1 W b $end
$var wire 1 X carryin $end
$var wire 1 Y carryout $end
$var wire 1 Z sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 [ a $end
$var wire 1 \ b $end
$var wire 1 ] carryin $end
$var wire 1 ^ carryout $end
$var wire 1 _ sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 ` a $end
$var wire 1 a b $end
$var wire 1 b carryin $end
$var wire 1 K carryout $end
$var wire 1 c sum $end
$upscope $end
$upscope $end
$scope module adder2 $end
$var wire 3 d C [2:0] $end
$var wire 1 e Cin0 $end
$var wire 1 f Cin0_new $end
$var wire 1 g Cout $end
$var wire 4 h a [3:0] $end
$var wire 4 i b [3:0] $end
$var wire 4 j b_new [3:0] $end
$var wire 1 k subtract $end
$var wire 4 l sum [3:0] $end
$var integer 32 m i [31:0] $end
$scope module adder0 $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 f carryin $end
$var wire 1 p carryout $end
$var wire 1 q sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 r a $end
$var wire 1 s b $end
$var wire 1 t carryin $end
$var wire 1 u carryout $end
$var wire 1 v sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 w a $end
$var wire 1 x b $end
$var wire 1 y carryin $end
$var wire 1 z carryout $end
$var wire 1 { sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 | a $end
$var wire 1 } b $end
$var wire 1 ~ carryin $end
$var wire 1 g carryout $end
$var wire 1 !" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!"
0~
1}
1|
1{
0z
0y
1x
0w
0v
0u
0t
0s
0r
1q
0p
1o
0n
b0 m
b101 l
0k
b1101 j
b1101 i
b1000 h
1g
0f
0e
b0 d
0c
1b
1a
0`
0_
1^
1]
1\
0[
0Z
1Y
1X
0W
1V
0U
1T
1S
1R
b0 Q
b0 P
0O
b1101 N
b1101 M
b11 L
1K
0J
0I
b111 H
0G
0F
0E
0D
1C
0B
0A
0@
1?
1>
0=
0<
0;
1:
09
08
07
06
b0 5
b110 4
03
b0 2
b0 1
b110 0
0/
0.
0-
b0 ,
b101 +
b0 *
b110 )
b1101 (
b1101 '
b0 &
b1101 %
b10101001 $
b110 #
b1101 "
b1101 !
$end
#100000
